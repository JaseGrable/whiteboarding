Question #3: Compressing Strings

Write an algorithm that takes a string with repeated characters and compresses them, using a number to show how many times the repeated character has been compressed. For instance, aaa would be written as 3a. Solve the problem with and without recursion.
Example

Input: "aaabccdddda"

Output: "3ab2c4da"


Pseudocode: 

function compressString 
  compressedStr = an empty string 
  count = 1 

for i from 0 to length of inputStr
  if inputStri[i] is the same as inputStr[i + 1]:
     increment count 
  else: 
     append count and inputStr[i] to compressedStr 
     reset count to 1 

return compressed Str 


code solution: 

function compressString(inputStr) {
    let compressedStr = "";
    let count = 1;

    for (let i = 0; i < inputStr.length; i++) {
        if (inputStr[i] === inputStr[i + 1]) {
            count++;
        } else {
            compressedStr += count + inputStr[i];
            count = 1;
        }
    }

    return compressedStr;
}
